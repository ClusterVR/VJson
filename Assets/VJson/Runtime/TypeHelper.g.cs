//
// Copyright (c) 2019- yutopp (yutopp@gmail.com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at  https://www.boost.org/LICENSE_1_0.txt)
//

// THIS FILE IS AUTOMATICALLY GENERATED from TypeHelper.g.template.cs

using System;
using System.Collections.Generic;

namespace VJson
{
    static partial class TypeHelper
    {
        private static readonly Dictionary<Type, Dictionary<Type, Func<object, object>>> _convTable =
            new Dictionary<Type, Dictionary<Type, Func<object, object>>>
            {
                {
                    typeof(bool), new Dictionary<Type, Func<object, object>>
                    {
                        { typeof(bool), o => o },
                    }
                },
                {
                    typeof(double), new Dictionary<Type, Func<object, object>>
                    {
                        { typeof(decimal), o => ConvertFromDoubleToDecimal((double)o) },
                        { typeof(double), o => o },
                        { typeof(float), o => ConvertFromDoubleToFloat((double)o) },
                    }
                },
                {
                    typeof(long), new Dictionary<Type, Func<object, object>>
                    {
                        { typeof(byte), o => ConvertFromLongToByte((long)o) },
                        { typeof(sbyte), o => ConvertFromLongToSbyte((long)o) },
                        { typeof(char), o => ConvertFromLongToChar((long)o) },
                        { typeof(decimal), o => ConvertFromLongToDecimal((long)o) },
                        { typeof(double), o => ConvertFromLongToDouble((long)o) },
                        { typeof(float), o => ConvertFromLongToFloat((long)o) },
                        { typeof(int), o => ConvertFromLongToInt((long)o) },
                        { typeof(uint), o => ConvertFromLongToUint((long)o) },
                        { typeof(long), o => o },
                        { typeof(ulong), o => ConvertFromLongToUlong((long)o) },
                        { typeof(short), o => ConvertFromLongToShort((long)o) },
                        { typeof(ushort), o => ConvertFromLongToUshort((long)o) },
                    }
                },
            };

        private static object ConvertFromDoubleToDecimal(double o) {
            return (decimal)o;
        }

        private static object ConvertFromDoubleToFloat(double o) {
            return (float)o;
        }

        private static object ConvertFromLongToByte(long o) {
            return (byte)o;
        }

        private static object ConvertFromLongToSbyte(long o) {
            return (sbyte)o;
        }

        private static object ConvertFromLongToChar(long o) {
            return (char)o;
        }

        private static object ConvertFromLongToDecimal(long o) {
            return (decimal)o;
        }

        private static object ConvertFromLongToDouble(long o) {
            return (double)o;
        }

        private static object ConvertFromLongToFloat(long o) {
            return (float)o;
        }

        private static object ConvertFromLongToInt(long o) {
            return (int)o;
        }

        private static object ConvertFromLongToUint(long o) {
            return (uint)o;
        }

        private static object ConvertFromLongToUlong(long o) {
            return (ulong)o;
        }

        private static object ConvertFromLongToShort(long o) {
            return (short)o;
        }

        private static object ConvertFromLongToUshort(long o) {
            return (ushort)o;
        }

        public static Func<object, object> GetConverter(Type fromTy, Type toTy)
        {
            Dictionary<Type, Func<object, object>> conv;
            if (_convTable.TryGetValue(fromTy, out conv))
            {
                Func<object, object> convFunc;
                if (conv.TryGetValue(toTy, out convFunc))
                {
                    return convFunc;
                }
            }

            return null;
        }
    }
}

